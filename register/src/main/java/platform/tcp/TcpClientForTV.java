package platform.tcp;

import java.io.*;
import java.net.Socket;

/**
 * @program: protocol
 * @description: 抖音发送本机信息偷懒获取加密信息实现类
 * @author: gaoxiang
 * @create: 2018-08-29 18:31
 **/
public class TcpClientForTV {

    public  String ip = "127.0.0.1";
    public  int port =9001;
    public  String adb_path ="C:\\Users\\Administrator\\AppData\\Local\\Android\\Sdk\\platform-enums.paramtable.urltools\\adb.exe";
    public  Socket socket;
    public TcpClientForTV(){
        startSocket();
    }

    public TcpClientForTV(String ip,int port){
        this.ip = ip;
        this.port = port;
        startSocket();

    }
    public void startSocket(){
        try {
            Runtime.getRuntime().exec("adb  forward tcp:9001 tcp:9001");
            socket = new Socket(ip,port);
        } catch (IOException e) {
            e.printStackTrace();
        }
        //System.out.println("客户端会话创建");
    }

    public byte[] get_Key_For_Devices(String device_Info) {
        send_String(device_Info);
        System.out.println("开始传输数据");
        InputStream inputStream = null;
        try {
            inputStream = socket.getInputStream();
        } catch (IOException e) {
            e.printStackTrace();
        }

        DataInputStream dataInputStream = new DataInputStream(inputStream);
        //接受传入的信息，并转化为字节流
        byte[] result = get_Bytes(dataInputStream);
        //  输出为了测试而已
        //System.out.println(new String(result));
        StringBuilder stringBuilder = new StringBuilder();
        for(int i =0;i<result.length;i++){
            stringBuilder.append(result[i]+" ");
        }
        System.out.println("传输内容: "+device_Info);
        System.out.println("传输结果："+stringBuilder.toString());

        return result;
    }

    public byte[] get_Key_For_Devices(byte[] device_Info) {
        StringBuilder stringBuilder = new StringBuilder();
        for(int i =0;i<device_Info.length;i++){
            stringBuilder.append(device_Info[i]+" ");
        }
        System.out.println("gzip文件流长度为: "+device_Info.length);
        System.out.println("gzip文件内容为: "+stringBuilder.toString());
        send_Bytes(socket,device_Info);
        System.out.println("开始传输数据");
        InputStream inputStream = null;
        try {
            inputStream = socket.getInputStream();
        } catch (IOException e) {
            e.printStackTrace();
        }

        DataInputStream dataInputStream = new DataInputStream(inputStream);
        //接受传入的信息，并转化为字节流
        byte[] result = get_Bytes(dataInputStream);
        //  输出为了测试而已
        //System.out.println(new String(result));
        stringBuilder = new StringBuilder();
        for(int i =0;i<result.length;i++){
            stringBuilder.append(result[i]+"  ");
        }
        System.out.println("结果二进制内容为: "+stringBuilder.toString());
        System.out.println("结果长度: "+result.length);

        return result;
    }

    public byte[] get_Bytes(DataInputStream dataInputStream){
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte buff = 0;
        try {
            int length = dataInputStream.readInt();

            for(int i=0;i<length;i++){
                buff = dataInputStream.readByte();
                byteArrayOutputStream.write(buff);
            }
            //byteArrayOutputStream.write('\0');
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("出现错误: "+ buff);
        }
        return  byteArrayOutputStream.toByteArray();
    }

    public void send_Bytes(Socket socket,byte[] result){
        OutputStream outputStream = null;
        try {
            outputStream = socket.getOutputStream();
            DataOutputStream dataOnputStream = new DataOutputStream(outputStream);
            System.out.println(result.length);
            dataOnputStream.writeInt(result.length);
            dataOnputStream.write(result);
            dataOnputStream.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }



    public void send_String(String string){

        try {
            OutputStream outputStream=socket.getOutputStream();//获取一个输出流，向服务端发送信息
            PrintWriter printWriter=new PrintWriter(outputStream);//将输出流包装成打印流
            printWriter.println(string);
            //System.out.println(string);
            printWriter.flush();
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("发送信息出错");
        }
        ;
    }

    public static void main(String[] args) throws IOException {
        String syrBuff = "{\"magic_tag\":\"ss_app_log\",\"header\":{\"display_name\":\"抖音短视频\",\"update_version_code\":1832,\"manifest_version_code\":183,\"aid\":1128,\"channel\":\"baidu\",\"appkey\":\"57bfa27c67e58e7d920028d3\",\"package\":\"com.ss.android.ugc.aweme\",\"app_version\":\"1.8.3\",\"version_code\":183,\"sdk_version\":201,\"os\":\"Android\",\"os_version\":\"5.1.1\",\"os_api\":22,\"device_model\":\"f103\",\"device_brand\":\"gionee\",\"device_manufacturer\":\"gionee\",\"cpu_abi\":\"armeabi-v7a\",\"build_serial\":\"00c7c516\",\"release_build\":\"61b8304_20180522\",\"density_dpi\":240,\"display_density\":\"hdpi\",\"resolution\":\"1600x900\",\"language\":\"zh\",\"mc\":\"00:81:41:de:1e:56\",\"timezone\":8,\"access\":\"wifi\",\"not_request_sender\":0,\"carrier\":\"CHINA MOBILE\",\"mcc_mnc\":\"46000\",\"rom\":\"V9.5.2.0.LACCNFA\",\"rom_version\":\"LMY48Z\",\"sig_hash\":\"aea615ab910015038f73c47e45d21466\",\"device_id\":\"39262138748\",\"openudid\":\"06e7aa24d4d4c8a4\",\"udid\":\"865166024287115\",\"clientudid\":\"71cfb1e8-ca28-447b-9acf-0b5c4033cb88\",\"serial_number\":\"00c7c516\",\"sim_serial_number\":[],\"region\":\"CN\",\"tz_name\":\"Asia\\/Shanghai\",\"tz_offset\":28800,\"sim_region\":\"cn\"},\"_gen_time\":1535725895917}";
        System.out.println(syrBuff);
        TcpClientForTV tcpClientForTV = new TcpClientForTV();
        tcpClientForTV.get_Key_For_Devices(syrBuff.getBytes());
//        int[] ouye = { 0x74, 0x63, 0x02, 0x0B, 0x3D, 0xD8, 0xBF, 0xEC, 0x9E, 0xAC, 0x20, 0x2E, 0x0F, 0x02, 0xFE, 0x33, 0x3B, 0x21, 0x3E, 0x50, 0x37, 0x5E, 0x7E, 0xBB, 0x3C, 0x1F, 0xA1, 0xD9, 0x2E, 0x7F, 0x88, 0x8F, 0x03, 0xCB, 0x52, 0xCE, 0xEF, 0x52, 0x72, 0x2E, 0x6B, 0x07, 0x8F, 0x02, 0x85, 0x6D, 0x56, 0x32, 0x99, 0x5E, 0x4E, 0x24, 0xD7, 0x9E, 0x15, 0xBE, 0x0C, 0x6C, 0xBB, 0x07, 0x25, 0x1D, 0x81, 0xF7, 0x10, 0x2D, 0x59, 0x1C, 0xB3, 0x93, 0xF3, 0xFB, 0xF6, 0x67, 0xCD, 0x72, 0xBD, 0x82, 0x89, 0xF8, 0xE9, 0x87, 0x7A, 0xBA, 0x9F, 0xE6, 0xEC, 0xC2, 0x56, 0x11, 0xAE, 0xAA, 0x9F, 0xED, 0xED, 0xCD, 0xF1, 0x8D, 0x46, 0x9A, 0x37, 0x1B, 0xCD, 0xF7, 0xDE, 0xCB, 0xB5, 0x60, 0xED, 0x8D, 0x00, 0x09, 0xAE, 0xFD, 0x94, 0x51, 0x26, 0x3E, 0x21, 0xC5, 0xA9, 0x8E, 0xDE, 0x82, 0x5B, 0x46, 0x7B, 0x04, 0x4A, 0xE1, 0x98, 0xD7, 0x10, 0x62, 0xEE, 0x5B, 0xAE, 0x91, 0xE9, 0xE0, 0x8A, 0xDB, 0x42, 0x00, 0x2E, 0x53, 0x34, 0x6C, 0xDE, 0x2C, 0xA4, 0xB5, 0xAD, 0xC3, 0xDC, 0xE5, 0x79, 0x1D, 0xDC, 0xA0, 0x9C, 0x42, 0x41, 0x4C, 0x00, 0x15, 0x83, 0x92, 0x9B, 0x1F, 0x2D, 0xCE, 0x5D, 0x4F, 0x53, 0x42, 0xF3, 0x0A, 0xA0, 0xE5, 0x41, 0xCA, 0x83, 0xB9, 0xD6, 0x05, 0xAD, 0x52, 0x1A, 0xD9, 0xB2, 0x93, 0x92, 0xA1, 0xA5, 0x27, 0x80, 0x50, 0x94, 0xAD, 0xF1, 0x7D, 0x4F, 0x2B, 0x86, 0xD3, 0x28, 0x2F, 0x13, 0x36, 0x16, 0xE8, 0x06, 0xC8, 0x79, 0x37, 0x8C, 0x52, 0x73, 0x1C, 0x73, 0x23, 0x18, 0x02, 0x1D, 0xA8, 0x82, 0x96, 0x15, 0xFF, 0x5B, 0xA2, 0xEB, 0x27, 0xE0, 0xF8, 0x02, 0x3E, 0x13, 0x39, 0x81, 0x96, 0x38, 0x28, 0x5D, 0xBC, 0x9B, 0x61, 0x71, 0x09, 0x62, 0x8E, 0xDB, 0xF5, 0x86, 0x6B, 0x52, 0x20, 0x53, 0x2A, 0xDD, 0xEC, 0xA1, 0x2D, 0x28, 0x6D, 0xBF, 0xA6, 0xC0, 0xCD, 0x7E, 0x8E, 0x3D, 0x81, 0x55, 0x86, 0x3D, 0x58, 0xAE, 0x8F, 0xC3, 0x80, 0xC4, 0xED, 0xAB, 0x62, 0x1F, 0x8F, 0x18, 0xA0, 0x5E, 0x7B, 0x99, 0x9F, 0x11, 0xCD, 0x6C, 0x25, 0x92, 0xE9, 0x78, 0x93, 0x1E, 0x7F, 0xA1, 0x2D, 0x00, 0xAD, 0x74, 0xFD, 0xF4, 0xF1, 0xF7, 0x5A, 0x27, 0xD9, 0x0A, 0x63, 0xDD, 0x31, 0xD1, 0x71, 0x3B, 0x7E, 0xD2, 0x59, 0x59, 0xDD, 0xA4, 0xDC, 0x49, 0x3E, 0xDF, 0x0F, 0xB2, 0xE2, 0x95, 0xB0, 0x02, 0x3B, 0x35, 0xDF, 0x44, 0xB9, 0xA2, 0x89, 0x99, 0xFE, 0x98, 0x7B, 0x98, 0xDB, 0xC4, 0xE6, 0xBF, 0x57, 0xB3, 0x89, 0x19, 0x7A, 0xAE, 0xFA, 0xC8, 0x3E, 0x8E, 0x3A, 0x71, 0x5B, 0x31, 0x91, 0x91, 0xD6, 0x6D, 0xC6, 0xCD, 0x7C, 0x50, 0x69, 0xB2, 0xEB, 0x90, 0xF2, 0xD8, 0x24, 0xB4, 0xBF, 0x30, 0x01, 0x28, 0xEE, 0xAF, 0x1E, 0x32, 0x09, 0x53, 0x72, 0x8E, 0x4C, 0xA1, 0x01, 0xD3, 0xCC, 0x2A, 0x0A, 0x68, 0x44, 0x9C, 0xCB, 0x0B, 0x8C, 0x47, 0x4C, 0xB8, 0x96, 0xD8, 0x0D, 0x34, 0x9F, 0xDD, 0x5F, 0x87, 0x1C, 0x4A, 0x8C, 0x17, 0xF1, 0x8C, 0x5C, 0x8E, 0x7D, 0x4A, 0x47, 0x7B, 0xF4, 0xC4, 0x45, 0x53, 0x4C, 0xE9, 0xFD, 0x79, 0xB9, 0x5A, 0x03, 0x2A, 0xE4, 0x07, 0x26, 0x2F, 0xB5, 0x16, 0x1F, 0x16, 0x78, 0xB1, 0x23, 0xED, 0xAD, 0x05, 0xD2, 0x97, 0x10, 0xD4, 0xEC, 0x99, 0xAB, 0xF0, 0x06, 0x18, 0xCC, 0xA3, 0x0D, 0x71, 0x9E, 0x2E, 0x7A, 0x46, 0xDA, 0x5C, 0x22, 0xE4, 0xD9, 0x2C, 0x3F, 0x56, 0x96, 0xD7, 0x3B, 0xA4, 0x58, 0x1D, 0xC4, 0x98, 0x69, 0x45, 0x53, 0xC2, 0x19, 0x83, 0xE2, 0x24, 0xE4, 0xE6, 0x7E, 0x50, 0x4B, 0x29, 0xC6, 0x42, 0x5A, 0xAB, 0x6D, 0x95, 0x31, 0xD2, 0xBB, 0x0F, 0x96, 0xE9, 0x30, 0x61, 0x1D, 0x59, 0xC6, 0x0C, 0xEF, 0x71, 0x15, 0x99, 0xEA, 0xB0, 0xF6, 0x48, 0x4A, 0x92, 0x60, 0x45, 0xCE, 0x93, 0x8E, 0x50, 0x7C, 0x38, 0x63, 0x3E, 0x97, 0x29, 0xE1, 0x35, 0x37, 0xE8, 0x4C, 0x10, 0xF8, 0x75, 0xDE, 0x74, 0xCC, 0xD0, 0xC3, 0x07, 0x83, 0x7D, 0xB9, 0x4C, 0xA2, 0x9B, 0x60, 0x78, 0x85, 0xB3, 0x3B, 0x65, 0xA7, 0x8F, 0xF0, 0x26, 0x25, 0xFF, 0x3B, 0x90, 0xF5, 0xD9, 0xF8, 0x8C, 0x04, 0x48, 0x01, 0x5D, 0x6E, 0x06, 0x16, 0xA9, 0x19, 0x90, 0xB0, 0xE9, 0x74, 0x37, 0x47, 0xA1, 0x91, 0xC5, 0xC6, 0x06, 0x51, 0x90, 0x07, 0xCC, 0xC6, 0xFD, 0x10, 0x14, 0x06, 0x7E, 0x1B, 0x54, 0x09, 0x5E, 0x85, 0x27, 0x75, 0x91, 0x6D, 0x22, 0x78, 0x35, 0x5F, 0x16, 0xF5, 0xA0, 0xF6, 0x7B, 0xC3, 0x1D, 0xDC, 0x07, 0x73, 0xAF, 0x1E, 0x76, 0x39, 0x04, 0xCF, 0xBE, 0xB5, 0xBC, 0xEA, 0xF3, 0x2C, 0xCF, 0x95, 0xF1, 0x26, 0x72, 0xD2, 0x76, 0x3D, 0x4F, 0x24, 0x0D, 0xAA, 0x94, 0xB4, 0x34, 0x99, 0x95, 0xBA, 0x3C, 0x63, 0x2C, 0xBB, 0x88, 0x57, 0xEC, 0x0E, 0x2E, 0x7F, 0x7D, 0xEC, 0x9E, 0xAC, 0x20, 0x2E, 0x50, 0x8C, 0xFE, 0x33, 0x5C, 0xF1, 0xF5, 0x7B };
//        for(int i =0;i<ouye.length;i++){
//            System.out.print(ouye[i]+"  ");
//        }
    }
}
