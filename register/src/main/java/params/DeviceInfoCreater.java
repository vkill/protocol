package params;


import util.MD5Code;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;


public class DeviceInfoCreater {


    public static Map getResult(){
        String []type = {"oppo r11","oppo r11 plus","xiaomi 6"};
        Random rand = new Random();
        int size = rand.nextInt(type.length);
        String device_type = type[size];
        String device_brand = type[size].split(" ")[0];
        String uuid_temp = String.valueOf(new Random(System.currentTimeMillis()).nextInt(9999999));
        String []temp = uuid_temp.split("");
        String uuid = "";
        if(temp.length < 7){
            uuid = "86516602";
            for(int i = 0;i < 7 - temp.length;i++){
                uuid += "0";
            }
            uuid += uuid_temp;
        }else{
            uuid = "86516602" + uuid_temp;
        }
        String line = new MD5Code().getMD5ofStr(uuid_temp);
        String openudid = "";
        char []list = line.toCharArray();
        for(int i = 0;i < 16;i ++){
            openudid += String.valueOf(list[i]).toLowerCase();
        }
        Map result = new HashMap();
        //device_type=f103&device_brand=gionee&uuid=865166024287115&openudid=06e7aa24d4d4c8a4

        result.put("device_type",device_type);
        result.put("device_brand",device_brand);
        result.put("uuid",uuid);
        result.put("openudid",openudid);
        return result;
    }

    public static String getWholeStr(Map data){
        String result = "";
        for(Object key : data.keySet()){
            String value = String.valueOf(data.get(key));
            result += "&"+key+"="+value;
        }
        char []array = result.toCharArray();
        String str = "";
        for(int i = 1;i< array.length;i++){
            str += array[i];
        }
        return str;
    }

    public static void main(String[] args) {
        int[] kao = { 0x74, 0x63, 0x02, 0x0F, 0x3D, 0xD8, 0xBF, 0xEC, 0x9E, 0xAC, 0x20, 0x2E, 0x0F, 0x02, 0xFE, 0x33, 0x3B, 0x71, 0x3E, 0x50, 0x37, 0xB1, 0x7E, 0xA5, 0x17, 0xB7, 0xC8, 0xC7, 0x5E, 0x46, 0x6A, 0x98, 0xEC, 0x94, 0xE1, 0xC9, 0x25, 0x20, 0xB9, 0xB9, 0xBE, 0x2C, 0x13, 0xE3, 0xA5, 0x4C, 0x51, 0x2F, 0xB2, 0xBE, 0x48, 0x95, 0x01, 0x9C, 0x13, 0xE3, 0x05, 0x71, 0xE4, 0xEE, 0x1C, 0x5F, 0xB6, 0x9C, 0x2C, 0x5E, 0x76, 0x0E, 0x5E, 0xD2, 0xDB, 0x45, 0x90, 0x5B, 0xFE, 0x1C, 0x85, 0x65, 0xF8, 0xBE, 0x1F, 0x3C, 0xA0, 0xCF, 0x4C, 0x38, 0xF3, 0x6A, 0x0A, 0xD2, 0xF0, 0x7A, 0xF8, 0x46, 0x06, 0xD0, 0xAA, 0xCB, 0x5D, 0x78, 0x81, 0xD9, 0x55, 0xB8, 0xCB, 0x98, 0x6E, 0xE3, 0xBC, 0xF1, 0x79, 0x14, 0xD9, 0x72, 0x51, 0x5E, 0xF0, 0x83, 0x07, 0x9B, 0x3D, 0xC7, 0xA7, 0xA4, 0x88, 0xAD, 0x95, 0x46, 0xBA, 0x33, 0x18, 0xF1, 0xD4, 0x41, 0x6D, 0x58, 0x7C, 0x93, 0x67, 0xA1, 0xAE, 0xEF, 0xF5, 0x1E, 0x79, 0x47, 0x34, 0x15, 0x97, 0x43, 0xA4, 0xC6, 0xB3, 0xD7, 0xB0, 0xB8, 0x79, 0x25, 0xDC, 0xA0, 0x4E, 0x75, 0x34, 0x9C, 0xBA, 0xCE, 0xB5, 0xC1, 0x23, 0x1C, 0xC2, 0xAC, 0xA8, 0x2B, 0xE7, 0xEA, 0x98, 0x4C, 0x91, 0xF0, 0xEF, 0x23, 0x86, 0xFB, 0x34, 0x65, 0xA7, 0x70, 0x33, 0x00, 0xBE, 0xCF, 0xE9, 0xFE, 0x1D, 0xE3, 0x06, 0xD7, 0xD4, 0xC9, 0xF1, 0x4F, 0x4F, 0x2B, 0x7A, 0xB8, 0x78, 0x1B, 0x48, 0x65, 0x1F, 0xAA, 0xA1, 0xEA, 0x79, 0x08, 0x6C, 0xEF, 0xB1, 0x08, 0xF5, 0xB1, 0x18, 0x3F, 0xC4, 0x56, 0x09, 0x0C, 0x6E, 0xD8, 0x94, 0x75, 0xEB, 0x0C, 0x5A, 0x9B, 0x5B, 0x48, 0x93, 0x9C, 0x8A, 0x55, 0xDB, 0x33, 0x27, 0x74, 0xEE, 0xC4, 0xCB, 0x85, 0x83, 0x93, 0xB1, 0xD2, 0x57, 0x56, 0xB4, 0xF3, 0x0A, 0x47, 0x57, 0x99, 0xBE, 0xED, 0x2E, 0x33, 0x19, 0xF0, 0xE7, 0x5E, 0x98, 0xB8, 0xFE, 0x6B, 0x7C, 0xFC, 0x14, 0xB3, 0x27, 0x67, 0xDD, 0x70, 0x44, 0xE9, 0xC7, 0x9C, 0x05, 0xFB, 0x3E, 0xA8, 0xC4, 0xE3, 0xFF, 0x48, 0x80, 0x38, 0x25, 0x0D, 0xB7, 0x0C, 0x3F, 0xA7, 0x4C, 0x7C, 0xDE, 0x60, 0xBB, 0xAC, 0x04, 0x53, 0xFB, 0xF3, 0x5B, 0x8A, 0x3C, 0x5C, 0x2D, 0x37, 0x45, 0x2A, 0xB1, 0xCD, 0xA7, 0x3A, 0x47, 0xCE, 0x67, 0x0D, 0x1E, 0xF3, 0xF9, 0x53, 0x53, 0xE3, 0x66, 0xD8, 0xF7, 0xC1, 0x22, 0x7F, 0xC7, 0x42, 0x93, 0xC2, 0x1E, 0xDE, 0xFF, 0xBF, 0x56, 0x4B, 0x1A, 0xCB, 0x0C, 0x19, 0x90, 0x13, 0xD2, 0x7E, 0x17, 0x04, 0x59, 0xDC, 0x0E, 0x8C, 0x5C, 0xEA, 0x24, 0x33, 0xD8, 0x0C, 0x60, 0x09, 0x9B, 0x3D, 0xC8, 0x30, 0x8E, 0x6A, 0xF7, 0x36, 0x30, 0xE8, 0xE2, 0x01, 0x99, 0x8D, 0x65, 0xD0, 0xDC, 0xEF, 0xAB, 0x2A, 0xEE, 0x5A, 0xD5, 0xBB, 0x63, 0x38, 0xA4, 0xD5, 0xCD, 0x00, 0x75, 0x33, 0x92, 0x5C, 0xC9, 0xB2, 0x12, 0x5C, 0xC3, 0xBB, 0xE7, 0x2F, 0x63, 0x86, 0x72, 0x2D, 0x7D, 0x75, 0x2D, 0x10, 0xDA, 0x38, 0xF0, 0x3C, 0xBD, 0x6C, 0x9C, 0x75, 0x35, 0x7E, 0x65, 0xB5, 0x00, 0xC6, 0x7E, 0x7B, 0x36, 0xB4, 0xA9, 0x4A, 0x86, 0xDA, 0x49, 0xE5, 0x5B, 0x44, 0x94, 0x06, 0xE5, 0x6E, 0x26, 0xCC, 0xC3, 0xAD, 0xB7, 0x8A, 0x69, 0x1D, 0x77, 0xFD, 0xDE, 0x72, 0x86, 0xBF, 0xD8, 0x60, 0xE2, 0x0E, 0x59, 0x85, 0xC7, 0xF1, 0xBB, 0x4A, 0x25, 0xAE, 0xAE, 0x82, 0x4D, 0x8C, 0xA5, 0x77, 0x50, 0xE3, 0xD8, 0x7B, 0xC3, 0xF0, 0xF5, 0x18, 0xD6, 0x6D, 0x21, 0xEF, 0x71, 0xEB, 0x14, 0x70, 0xB2, 0xDC, 0x03, 0x36, 0x6C, 0xC3, 0x27, 0xAD, 0x5A, 0x8B, 0x9B, 0x03, 0x15, 0x92, 0x06, 0xAD, 0xC9, 0x7C, 0x59, 0xB0, 0xCB, 0x1C, 0x5A, 0xCB, 0x7E, 0x97, 0x56, 0x1F, 0xEE, 0x73, 0x1D, 0x74, 0xEA, 0xB9, 0x59, 0xDC, 0xCB, 0xFD, 0xBA, 0xD6, 0x38, 0x28, 0x60, 0xEC, 0x12, 0xF9, 0xDB, 0xA4, 0x3E, 0x76, 0xB8, 0xAD, 0x29, 0x92, 0xCC, 0x00, 0xF4, 0x92, 0x25, 0xC4, 0x9D, 0xEA, 0xEC, 0x4F, 0x67, 0x2B, 0x6E, 0xAC, 0x2A, 0x72, 0xF0, 0xFE, 0xE0, 0x17, 0xD3, 0x21, 0x67, 0x8D, 0xC9, 0xF4, 0xD1, 0xAF, 0x3A, 0xB0, 0xE3, 0xB1, 0xCA, 0x4E, 0x7C, 0x84, 0x86, 0x44, 0x39, 0xEA, 0xA5, 0x9C, 0x52, 0xF1, 0x25, 0xC0, 0xF1, 0x1A, 0x5E, 0xAC, 0x26, 0xAE, 0x98, 0xD9, 0xEE, 0x2F, 0x7C, 0xF9, 0x6B, 0x4D, 0xD9, 0x5D, 0x0F, 0xC7, 0x2F, 0xD1, 0x9C, 0x47, 0xC9, 0x5A, 0xCF, 0x6A, 0xC3, 0x12, 0xBC, 0x87, 0x23, 0x57, 0x29, 0xCD, 0x5C, 0x2C, 0x4F, 0xA3, 0x28, 0x44, 0xD1, 0x62, 0x85, 0xAD, 0x5C, 0x01, 0xC5, 0x9D, 0x28, 0x78, 0x74, 0x0D, 0x5C, 0xE1, 0xBE, 0x7F, 0x5D, 0x1E, 0x36, 0x51, 0xE5, 0xFA, 0x39, 0x3B, 0x0D, 0xAD, 0x21, 0xE8, 0x7A, 0x63, 0xE8, 0x2A, 0x5C, 0x9F, 0x5A, 0xEA, 0x9E, 0x86, 0xEC, 0xEC, 0x9E, 0xAC, 0x20, 0x2E, 0x50, 0x8C, 0xFE, 0x33, 0x5C, 0xF1, 0xF5, 0x7B };
        System.out.println(kao.length);
        System.out.println();
        int n =0;
        for(int i =0;i<kao.length;i++){
            System.out.print(kao[i]+"  ");
            n++;
        }
        System.out.println();
        System.out.println(n);
    }


}
